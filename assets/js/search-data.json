{
  
    
        "post0": {
            "title": "Programatically download OpenAQ data",
            "content": "# !pip install boto3 botocore import pandas as pd import numpy as np import matplotlib.pyplot as plt import sys import boto3 import botocore import os from IPython.display import clear_output . Setup . s3 = boto3.client(&#39;s3&#39;, config=botocore.config.Config(signature_version=botocore.UNSIGNED)) bucket_name = &#39;openaq-fetches&#39; prefix = &#39;realtime-gzipped/&#39; path = &#39;/content/drive/MyDrive/IJCAI-21/data/OpenAQ-Delhi/&#39; start_date = &#39;2020/01/01&#39; # start date (inclusive) end_date = &#39;2020/12/31&#39; # end date (inclusive) . Download . for date in pd.date_range(start=start_date, end=end_date): clear_output(wait=True) date = str(date).split(&#39; &#39;)[0] # keeping just YYYY-MM-DD from YYYY-MM-DD HH:MM:SS print(&#39;Downloading:&#39;, date) data_dict = s3.list_objects(Bucket = bucket_name, Prefix = prefix+date) for file_obj in data_dict[&#39;Contents&#39;]: f_name = file_obj[&#39;Key&#39;] tmp_path = &#39;/&#39;.join((path+f_name).split(&#39;/&#39;)[:-1]) if not os.path.exists(tmp_path): os.makedirs(tmp_path) s3.download_file(bucket_name, f_name, path+f_name) . Downloading: 2020-05-04 . Validate . for date in pd.date_range(start=start_date, end=end_date): date = str(date).split(&#39; &#39;)[0] # keeping just YYYY-MM-DD from YYYY-MM-DD HH:MM:SS data_dict = s3.list_objects(Bucket = bucket_name, Prefix = prefix+date) for file_obj in data_dict[&#39;Contents&#39;]: assert os.path.exists(path+file_obj[&#39;Key&#39;]), file_obj[&#39;Key&#39;] print(&#39;Validated&#39;) .",
            "url": "https://patel-zeel.github.io/blog/data/openaq/2021/02/17/Programatically_download_OpenAQ_data.html",
            "relUrl": "/data/openaq/2021/02/17/Programatically_download_OpenAQ_data.html",
            "date": " • Feb 17, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Understanding Kernels in Gaussian Process",
            "content": "!pip install -qq GPy import autograd.numpy as np import pandas as pd import GPy import matplotlib.pyplot as plt from autograd import grad from matplotlib.animation import FuncAnimation from matplotlib import rc import seaborn as sns . Basics of kernels in Gaussian processes . Gaussian process (GP) is a stochstic process where each observation is assumed to be a sample from a Gaussian (Normal) distribution. Probability density function (PDF) for a single observation $y_1$ is given as, $$ begin{aligned} y_1 sim mathcal{N} left( mu_1, sigma_1^2 right) end{aligned} $$ PDF of multiple such observations is a multivariate Gaussian distribution, $$ begin{aligned} Y sim mathcal{N} left(M, Sigma right) end{aligned} $$ In practice, $M$ and $ Sigma$ are modeled as functions of predictors $X$. . Now, multivariate PDF can be modified as, $$ begin{aligned} Y sim mathcal{N} left( mathcal{F}(X), mathcal{K}(X,X) right) end{aligned} $$ Where, $ mathcal{F}$ is a mean function and $ mathcal{K}$ is a kernel (covariance) function. Often $ mathcal{F}(X)$ is assumed to be zero ($ mathcal{F}(X)=0$) and only $ mathcal{K}(X, X)$ is employed to capture relationship between $X$ and $Y$. . The subsequent sections focus on various choices of $ mathcal{K}$ and their effect on $X$ and $Y$. . RBF (Radial basis function) Kernel, Stationarity and Isotropy . RBF is one of the most commonly used kernels in GPs due to it&#39;s infinetely differentiability (extreme flexibility). This property helps us to model a vast variety of functions $X to Y$. . RBF kernel is given as the following, $$ begin{aligned} mathcal{K}(x_1,x_2)= sigma^2exp left(- frac{(x-x&#39;)^2}{2l^2} right) end{aligned} $$ Where, $ sigma^2$ is variance and $l$ is known as lengthscale. . Stationarity . RBF is a stationary kernel and so it is invariant to translation in the input space. In other words, $ mathcal{K}(x,x&#39;)$ depends only on $x-x&#39;$. . Isotropy . RBF is also isotropic kernel, which means that $ mathcal{K}(x,x&#39;)$ depends only on $|x-x&#39;|$. Thus, we have $ mathcal{K}(x,x&#39;) = mathcal{K}(x&#39;,x)$. . Let&#39;s visualize few functions drawn from the RBF kernel . def K_rbf(X1, X2, sigma=1., l=1.): return (sigma**2)*(np.exp(-0.5*np.square(X1-X2.T)/l**2)) . Helper functions . def plot_functions(kernel_func, ax0_ylim=(-3,3), ax1_ylim=(-0.1,1.1)): mean = np.zeros(X.shape[0]) cov = kernel_func(X, X, sigma, l) functions = np.random.multivariate_normal(mean, cov, size=5) fig = plt.figure(figsize=(14,8), constrained_layout=True) gs = fig.add_gridspec(2,4) ax0 = fig.add_subplot(gs[0, 1:-1]) ax0.set_ylim(*ax0_ylim) ax1 = fig.add_subplot(gs[1, 0:2]) ax1.set_ylim(*ax1_ylim) ax2 = fig.add_subplot(gs[1, 2:4]) for func in functions: ax0.plot(X, func,&#39;o-&#39;); ax0.set_xlabel(&#39;X&#39;);ax0.set_ylabel(&#39;Y&#39;);ax0.set_title(&#39;Functions drawn from &#39;+k_name+&#39; kernel&#39;); ax1.plot(X, cov[:,4]);ax1.set_title(&#39;K(0,X)&#39;);ax1.set_xlabel(&#39;X&#39;);ax1.set_ylabel(&#39;K(0,X)&#39;) sns.heatmap(cov.round(2), ax=ax2, xticklabels=X.ravel(), yticklabels=X.ravel(), annot=True); ax2.set_xlabel(&#39;X&#39;);ax2.set_ylabel(&#39;X&#39;);ax2.set_title(&#39;Covariance matrix&#39;); def animate_functions(kernel_func, val_list, ax0_ylim=(-3,3), ax1_ylim=(-0.1,1.1), k_name=&#39;&#39;,p_name=&#39;&#39;,symbol=&#39;&#39;): fig = plt.figure(figsize=(14,8)) gs = fig.add_gridspec(2,4) ax0 = fig.add_subplot(gs[0, 1:-1]);ax1 = fig.add_subplot(gs[1, 0:2]);ax2 = fig.add_subplot(gs[1, 2:4]); def update(p): ax0.cla();ax1.cla();ax2.cla(); ax0.set_ylim(*ax0_ylim);ax1.set_ylim(*ax1_ylim) if p_name == &#39;Lengthscale&#39;: cov = kernel_func(X, X, l=p) elif p_name == &#39;Variance&#39;: cov = kernel_func(X, X, sigma=np.sqrt(p)) elif p_name == &#39;Offset&#39;: cov = kernel_func(X, X, c=p) elif p_name == &#39;Period&#39;: cov = kernel_func(X, X, p=p) functions = np.random.multivariate_normal(mean, cov, size=5) for func in functions: ax0.plot(X, func,&#39;o-&#39;); ax0.set_xlabel(&#39;X&#39;);ax0.set_ylabel(&#39;Y&#39;);ax0.set_title(&#39;Functions drawn from &#39;+k_name+&#39; kernel n&#39;+p_name+&#39; (&#39;+symbol+&#39;) = &#39;+str(p)); ax1.plot(X, cov[:,4]);ax1.set_title(&#39;K(0,X)&#39;);ax1.set_title(&#39;K(0,X)&#39;);ax1.set_xlabel(&#39;X&#39;);ax1.set_ylabel(&#39;K(0,X)&#39;) sns.heatmap(cov.round(2), ax=ax2, xticklabels=X.ravel(), yticklabels=X.ravel(), annot=True, cbar=False); ax2.set_xlabel(&#39;X&#39;);ax2.set_ylabel(&#39;X&#39;);ax2.set_title(&#39;Covariance matrix&#39;); anim = FuncAnimation(fig, update, frames=val_list, blit=False) plt.close() rc(&#39;animation&#39;, html=&#39;jshtml&#39;) return anim . Verifying if our kernel is consistent with GPy kernels. . X = np.linspace(101,1001,200).reshape(-1,1) sigma, l = 7, 11 assert np.allclose(K_rbf(X,X,sigma,l), GPy.kern.RBF(1, variance=sigma**2, lengthscale=l).K(X,X)) . np.random.seed(0) X = np.arange(-4,5).reshape(-1,1) sigma = 1. l = 3. k_name = &#39;RBF&#39; plot_functions(K_rbf, ax0_ylim=(-3.5,3)) . Let&#39;s see the effect of varying parameters $ sigma$ and $l$ of the RBF kernel function. . np.random.seed(0) sigma = 1. val_list = [0.5,1,2,3,4,5] animate_functions(K_rbf, val_list, k_name=&#39;RBF&#39;, p_name=&#39;Lengthscale&#39;, symbol=&#39;l&#39;) . &lt;/input&gt; Once Loop Reflect l = 1. val_list = [1,4,9,16,25] animate_functions(K_rbf, val_list, ax0_ylim=(-12,12), ax1_ylim=(-0.1, 26), k_name=&#39;RBF&#39;, p_name=&#39;Variance&#39;, symbol=&#39;sigma&#39;) . &lt;/input&gt; Once Loop Reflect With increase in value of $l$, functions drawn from the kernel become smoother. Covariance between a pair of points is increasing with increase in $l$. . Increasing $ sigma^2$ increase the overall uncertainty (width of the space where 95% of the functions live) across all the points. . Matern Kernel . Matern kernels are given by a general formula as following, $$ begin{aligned} mathcal{K}(x_1, x_2) = sigma^2 frac{1}{ Gamma( nu)2^{ nu-1}} Bigg( frac{ sqrt{2 nu}}{l} |x_1-x_2| Bigg)^ nu K_ nu Bigg( frac{ sqrt{2 nu}}{l} |x_1-x_2| Bigg) end{aligned} $$ Where, $ Gamma$ is gamma function and $K_ nu$ is modified Bessel function of second order. . The general formula is not very intuitive about the functionality of this kernel. In practice, Matern with $ nu= {0.5,1.5,2.5 }$ are used, where GP with each kernel is $( lceil nu rceil-1)$ times differentiable. . Matern functions corresponding to each $ nu$ values are defined as the following, $$ begin{aligned} Matern12 to mathcal{K_{ nu=0.5}}(x_1, x_2) &amp;= sigma^2exp left(- frac{|x_1-x_2|}{l} right) Matern32 to mathcal{K_{ nu=1.5}}(x_1, x_2) &amp;= sigma^2 left(1+ frac{ sqrt{3}|x_1-x_2|}{l} right)exp left(- frac{ sqrt{3}|x_1-x_2|}{l} right) Matern52 to mathcal{K_{ nu=2.5}}(x_1, x_2) &amp;= sigma^2 left(1+ frac{ sqrt{5}|x_1-x_2|}{l}+ frac{5(x_1-x_2)^2)}{3l^2} right)exp left(- frac{ sqrt{5}|x_1-x_2|}{l} right) end{aligned} $$ Matern kernels are stationary as well as isotropic. With $ nu to infty$ they converge to $RBF$ kernel. $Matern12$ is also known as $Exponential$ kernel in toolkits such as GPy. . Now, let&#39;s draw few functions from each of these versions and try to get intuition behind each of them. . def K_m12(X1, X2, sigma=1., l=1.): # v = 0.5 return (sigma**2)*(np.exp(-np.abs(X1-X2.T)/l)) def K_m32(X1, X2, sigma=1., l=1.): # v = 1.5 return (sigma**2)*(1+((3**0.5)*np.abs(X1-X2.T))/l)*(np.exp(-(3**0.5)*np.abs(X1-X2.T)/l)) def K_m52(X1, X2, sigma=1., l=1.): # v = 2.5 return (sigma**2)*(1+(((5**0.5)*np.abs(X1-X2.T))/l)+((5*(X1-X2.T)**2)/(3*l**2)))* (np.exp(-(5**0.5)*np.abs(X1-X2.T)/l)) . Verifying if our kernels are consistent with GPy kernels. . X = np.linspace(101,1001,50).reshape(-1,1) assert np.allclose(K_m32(X,X,sigma=7.,l=11.), GPy.kern.Matern32(1,lengthscale=11.,variance=7**2).K(X,X)) assert np.allclose(K_m52(X,X,sigma=7.,l=11.), GPy.kern.Matern52(1,lengthscale=11.,variance=7**2).K(X,X)) . X = np.arange(-4,5).reshape(-1,1) sigma = 1. l = 3. fig, ax = plt.subplots(3,2,figsize=(14,10)) names = [&#39;Matern12&#39;, &#39;Matern32&#39;, &#39;Matern52&#39;] for k_i, kernel in enumerate([K_m12, K_m32, K_m52]): mean = np.zeros(X.shape[0]) cov = kernel(X, X, sigma, l) functions = np.random.multivariate_normal(mean, cov, size=5) for func in functions: ax[k_i,0].plot(X, func); ax[k_i,0].set_xlabel(&#39;X&#39;);ax[k_i,0].set_ylabel(&#39;Y&#39;);ax[k_i,0].set_title(&#39;Functions drawn from &#39;+names[k_i]+&#39; kernel&#39;); sns.heatmap(cov.round(2), ax=ax[k_i,1], xticklabels=X.ravel(), yticklabels=X.ravel(), annot=True); ax[k_i,1].set_xlabel(&#39;X&#39;);ax[k_i,1].set_ylabel(&#39;X&#39;);ax[k_i,1].set_title(&#39;Covariance matrix&#39;); plt.tight_layout(); . From the above plot, we can say that smoothness is increasing in functions as we increase $ nu$. Thus, smoothness of functions in terms of kernels is in the following order: Matern12&lt;Matern32&lt;Matern52. . Let us see effect of varying $ sigma$ and $l$ on Matern32 which is more popular among the three. . np.random.seed(0) sigma = 1. val_list = [0.5,1,2,3,4,5] animate_functions(K_m32, val_list, k_name=&#39;Matern32&#39;, p_name=&#39;Lengthscale&#39;, symbol=&#39;l&#39;) . &lt;/input&gt; Once Loop Reflect We can see that Matern32 kernel behaves similar to RBF with varying $l$. Though, Matern32 is less smoother than RBF. A quick comparison would clarify this. . X = np.linspace(-10,10,100).reshape(-1,1) plt.plot(X, K_rbf(X,X, l=3.)[:,50], label=&#39;RBF&#39;) plt.plot(X, K_m32(X,X, l=3.)[:,50], label=&#39;Matern32&#39;) plt.legend();plt.xlabel(&#39;X&#39;);plt.ylabel(&#39;Covariance (K(0,X))&#39;); plt.title(&#39;K(0,X)&#39;); . Periodic Kernel . Periodic Kernel is given as the following, $$ begin{aligned} mathcal{K}(x_1,x_2)= sigma^2 exp left(- frac{ sin^2( pi|x_1 - x_2|/p)}{2l^2} right) end{aligned} $$ Where $p$ is period. Let&#39;s visualize few functions drawn from this kernel. . def K_periodic(X1, X2, sigma=1., l=1., p=3.): return sigma**2 * np.exp(-0.5*np.square(np.sin(np.pi*(X1-X2.T)/p))/l**2) X = np.linspace(10,1001,50).reshape(-1,1) assert np.allclose(K_periodic(X,X,sigma=7.,l=11.,p=3.), GPy.kern.StdPeriodic(1,lengthscale=11.,variance=7**2,period=3.).K(X,X)) . np.random.seed(0) X = np.arange(-4,5).reshape(-1,1) sigma = 1 l = 1. p = 3. k_name = &#39;Periodic&#39; plot_functions(K_periodic) . We will investigate the effect of varying period $p$ now. . np.random.seed(0) val_list = [1., 2., 3., 4., 5.] animate_functions(K_periodic, val_list, ax1_ylim=(0.4,1.1), k_name=&#39;Periodic&#39;,p_name=&#39;Period&#39;) . &lt;/input&gt; Once Loop Reflect From the above animation we can see that, all points that are $p$ distance apart from each other have exactly same values because they have correlation of exactly 1 ($ sigma=1 to covariance=correlation$). . Now, we will investigate effect of lenging lengthscale $l$ while other parameters are constant. . np.random.seed(0) val_list = [1., 2., 3., 4., 5.] animate_functions(K_periodic, val_list, ax1_ylim=(0.6,1.1), k_name=&#39;Periodic&#39;,p_name=&#39;Lengthscale&#39;, symbol=&#39;l&#39;) . &lt;/input&gt; Once Loop Reflect We can see that correlation between a pair of locations $ {x_1,x_2|x_1-x_2&lt;p }$ increases as the lengthscale is increased. . Linear Kernel . Linear kernel (a.k.a. dot-product kernel) is given as the following, $$ begin{aligned} mathcal{K}(x_1,x_2)= (x_1-c)(x_2-c)+ sigma^2 end{aligned} $$ Let&#39;s visualize few functions drawn from the linear kernel . def K_lin(X1, X2, sigma=1., c=1.): return (X1-c)@(X2.T-c) + sigma**2 . np.random.seed(0) sigma = 1. c = 1. plot_functions(K_lin, ax0_ylim=(-10,5), ax1_ylim=(-3,7)) . Let&#39;s see the effect of varying parameters $ sigma$ and $c$ of the linear kernel function. . val_list = [-3,-2,-1,0,1,2,3] animate_functions(K_lin, val_list, ax0_ylim=(-15,12), ax1_ylim=(-3,23), p_name=&#39;Offset&#39;, symbol=&#39;c&#39;) . &lt;/input&gt; Once Loop Reflect np.random.seed(1) val_list = np.square(np.array([1,2,3,4,5,8])) animate_functions(K_lin, val_list, ax0_ylim=(-25,15), ax1_ylim=(-5,110), p_name=&#39;Variance&#39;, symbol=&#39;sigma&#39;) . &lt;/input&gt; Once Loop Reflect Varying $c$ parameter changes position of shallow region in covariance matrix. In other words, as $x to c$, points close to $x$ have variance $ to sigma^2$. Distant points have monotonically increasing variance. . Increasing $ sigma^2$ adds a constant in all variance and covariances. So, it allows more uncertainty across all points and weakens the monotonic trend of variance over distant points. . Non-stationary behaviour of Linear kernel . Unlike other stationary kernels, Linear kernel is not invariant of translations in the input space. The comparison below, visually supports this claim. . fig, ax = plt.subplots(2,2,figsize=(14,8), sharex=True) kerns = [K_rbf, K_m32, K_periodic, K_lin] k_names = [&#39;RBF&#39;, &#39;Matern32&#39;, &#39;Periodic&#39;, &#39;Linear&#39;] X = np.linspace(-10,10,21).reshape(-1,1) def update(x): count = 0 for i in range(2): for j in range(2): ax.ravel()[count].cla() tmp_kern = kerns[count] mean = np.zeros(X.shape[0]) cov = tmp_kern(X,X) ax.ravel()[count].plot(X, cov[:,x]); ax.ravel()[count].set_xlim(X[x-3],X[x+3]) ax.ravel()[count].set_xlabel(&#39;X&#39;); ax.ravel()[count].set_ylabel(&#39;K(&#39;+str(X[x].round(2))+&#39;,X)&#39;); ax.ravel()[count].set_title(&#39;Covariance K(&#39;+str(X[x].round(2))+&#39;,X) for &#39;+k_names[count]+&#39; kernel&#39;); count += 1 ax.ravel()[3].set_ylim(-5,80) plt.tight_layout() anim = FuncAnimation(fig, update, frames=[5,7,9,11,13,15], blit=False) plt.close() rc(&#39;animation&#39;, html=&#39;jshtml&#39;) anim . &lt;/input&gt; Once Loop Reflect &lt;Figure size 432x288 with 0 Axes&gt; . Multiplications of kernels . If a single kernel is having high bias in fitting a dataset, we can use mutiple of these kernels in multiplications and/or summations. First, let us see effect of multiplication of a few kernels. . Periodic * Linear . X = np.linspace(-10,10,100).reshape(-1,1) plt.plot(X, K_periodic(X,X,sigma=2.)[:,50], label=&#39;Periodic&#39;) plt.plot(X, K_lin(X,X,sigma=0.01,c=0)[:,50], label=&#39;Linear&#39;) plt.plot(X, K_periodic(X,X,sigma=2.)[:,50]*K_lin(X,X,sigma=0.01,c=0)[:,50], label=&#39;Periodic*Linear&#39;) plt.legend(bbox_to_anchor=(1,1));plt.xlabel(&#39;X&#39;);plt.ylabel(&#39;Covariance&#39;) plt.title(&#39;K(0,*)&#39;); . Linear * Linear . X = np.linspace(-1,1,100).reshape(-1,1) plt.plot(X, K_lin(X,X,c=-1)[:,50], label=&#39;Linear1&#39;) plt.plot(X, K_lin(X,X,c=1)[:,50], label=&#39;Linear2&#39;) plt.plot(X, K_lin(X,X,c=0.5)[:,50], label=&#39;Linear3&#39;) plt.plot(X, K_lin(X,X,c=-1)[:,50]*K_lin(X,X,c=1)[:,50], label=&#39;Linear1*Linear3&#39;) plt.plot(X, K_lin(X,X,c=-1)[:,50]*K_lin(X,X,c=1)[:,50]*K_lin(X,X,c=0.5)[:,50], label=&#39;Linear1*Linear2*Linear3&#39;) plt.legend(bbox_to_anchor=(1,1)); . Matern * Linear . X = np.linspace(-1,1,100).reshape(-1,1) k1 = K_lin(X,X,c=1)[:,50] k2 = K_m32(X,X)[:,50] plt.plot(X, k1, label=&#39;Linear&#39;) plt.plot(X, k2, label=&#39;Matern32&#39;) plt.plot(X, k1*k2, label=&#39;Matern32*Linear&#39;) plt.legend(bbox_to_anchor=(1,1)); . Appendix (Extra material) . At this stage, we do not know how the fuctions are drawn from linear kernel based covariance matrix end up being lines with various intercepts and slopes. . . Predicting at a single point after observing value at a single point . Let&#39;s see how would be a GP prediction after observing value at a single point. . Our kernel function is given by, . $K(x,x&#39;)=(x-c) cdot (x&#39;-c)+ sigma^2$ | . Now, we observe value $y$ at a location $x$ and we want to predict value $y^*$ at location $x^*$. $$ begin{aligned} (y^*|x_1,y_1,x^*) &amp;= K(x^*,x) cdot K^{-1}(x,x) cdot y &amp;= left( frac{(x-c)(x^*-c)+ sigma^2}{(x-c)(x-c)+ sigma^2} right) cdot y end{aligned} $$ $c$ and $ sigma^2$ do not vary in numerator and denominator so, the value of $y^* propto x^*$. . . Predicting at a single point after observing values at two points . Now, we&#39;ll take a case where two values ${y_1, y_2}$ are observed at ${x_1, x_2}$. Let us try to predict value $y^*$ at $x^*$. . $$ y^ = begin{bmatrix} K(x_1, x^) &amp; K(x_2,x^*) end{bmatrix} begin{bmatrix} K(x_1, x_1) &amp; K(x_1,x_2) K(x_2, x_1) &amp; K(x_2,x_2) end{bmatrix}^{-1} begin{bmatrix} y_1 y_2 end{bmatrix} . &amp; = begin{bmatrix} (x_1-c)(x^*-c)+ sigma^2 &amp; (x_2-c)(x^*-c)+ sigma^2 end{bmatrix} begin{bmatrix} (x_1-c)^2+ sigma^2 &amp; (x_1-c) (x_2-c)+ sigma^2 (x_2-c) (x_1-c)+ sigma^2 &amp; (x_2-c)^2 + sigma^2 end{bmatrix}^{-1} begin{bmatrix} y_1 y_2 end{bmatrix} . &amp; = begin{bmatrix} (x_1-c)(x^*-c)+ sigma^2 &amp; (x_2-c)(x^*-c)+ sigma^2 end{bmatrix} frac{1}{ sigma^2(x_1-x_2)^2} begin{bmatrix} (x_2-c)^2+ sigma^2 &amp; -[(x_1-c)(x_2-c)+ sigma^2] -[(x_2-c) (x_1-c)+ sigma^2] &amp; (x_1-c)^2 + sigma^2 end{bmatrix} begin{bmatrix} y_1 y_2 end{bmatrix} tag{1} . From Eq. (1) second term, we can say that if $ sigma^2=0$, matrix is not-invertible because determinant is zero. It means that, if $ sigma^2=0$, observing a single point is enough, we can infer values at infinite points after observing that single point. . Evaluating Eq. (1) further, it converges to the following equation, $$ begin{aligned} y^* = frac{(x_1y_2-x_2y_1)+x^*(y_1-y_2)}{(x_1-x_2)} end{aligned} $$ Interestingly, we can see that output does not depend on $c$ or $ sigma^2$ anymore. Let us verify experimentally if this is true for observing more than 2 data points. . Prepering useful functions . from scipy.optimize import minimize . def cov_func(x, x_prime, sigma, c): return (x-c)@(x_prime-c) + sigma**2 def neg_log_likelihood(params): n = X.shape[0] sigma, c, noise_std = params cov = cov_func(X, X.T, sigma, c) cov = cov + (noise_std**2)*np.eye(n) nll_ar = 0.5*(Y.T@np.linalg.pinv(cov)@Y) + 0.5*n*np.log(2*np.pi) + 0.5*np.log(np.linalg.det(cov)) return nll_ar[0,0] def predict(params): sigma, c, noise_std = params k = cov_func(X, X.T, sigma, c) np.fill_diagonal(k, k.diagonal()+noise_std**2) k_inv = np.linalg.pinv(k) k_star = cov_func(X_test, X.T, sigma, c) mean = k_star@k_inv@Y cov = cov_func(X_test, X_test.T, sigma, c) - k_star@k_inv@k_star.T return mean, cov . Observing more than two points and changing hyperparameters manually . X = np.array([3,4,5,6,7,8]).reshape(-1,1) Y = np.array([6,9,8,11,10,13]).reshape(-1,1) X_test = np.linspace(1,8,20).reshape(-1,1) params_grid = [[1., 0.01, 10**-10], [100., 1., 10**-10], [100., 0.01, 10**-10], [1., 2., 1.]] # sigma, c, noise_std X_extra = np.hstack([np.ones((X.shape[0], 1)), X]) Theta = np.linalg.pinv(X_extra.T@X_extra)@X_extra.T@Y X_test_extra = np.hstack([np.ones((X_test.shape[0], 1)), X_test]) Y_test_ideal = X_test_extra@Theta fig, ax = plt.subplots(1,4,figsize=(16,5), sharey=True) means = [] for p_i, params in enumerate(params_grid): Y_test_mean, Y_test_cov = predict(params) means.append(Y_test_mean) ax[p_i].scatter(X, Y, label=&#39;train&#39;) ax[p_i].scatter(X_test, Y_test_mean, label=&#39;test&#39;) ax[p_i].legend();ax[p_i].set_xlabel(&#39;X&#39;);ax[p_i].set_ylabel(&#39;Y&#39;); ax[p_i].set_title(&#39;sigma=&#39;+str(params[0])+&#39;, c=&#39;+str(params[1])+&#39;, noise=&#39;+str(params[2])); . np.allclose(Y_test_ideal, means[0]), np.allclose(Y_test_ideal, means[1]), np.allclose(Y_test_ideal, means[2]), np.allclose(Y_test_ideal, means[3]) . (True, True, True, False) . model = GPy.models.GPRegression(X, Y, GPy.kern.Linear(input_dim=1)) # model[&#39;Gaussian_noise&#39;].fix(10**-10) # model.kern.variances.fix(10**-10) model.optimize() model.plot() plt.plot(X_test, Y_test_ideal, label=&#39;Normal Eq. fit&#39;) plt.plot(X_test,model.predict(X_test)[0], label=&#39;Prediction&#39;) plt.legend() model . Model: GP regression Objective: 13.51314321804978 Number of Parameters: 2 Number of Optimization Parameters: 2 Updates: True . GP_regression. valueconstraintspriors . &lt;td class=tg-left&gt; linear.variances &lt;/td&gt;&lt;td class=tg-right&gt; 2.806515343539501&lt;/td&gt;&lt;td class=tg-center&gt; +ve &lt;/td&gt;&lt;td class=tg-center&gt; &lt;/td&gt; . &lt;td class=tg-left&gt; Gaussian_noise.variance&lt;/td&gt;&lt;td class=tg-right&gt;2.0834221617534134&lt;/td&gt;&lt;td class=tg-center&gt; +ve &lt;/td&gt;&lt;td class=tg-center&gt; &lt;/td&gt; . We can see that there is no change in fit with change in $c$ and $ sigma$. 4th fit is not matching with the ideal fit obtained by normal equation because of high noise. Now, let us estimate parameters by minimizing negative log marginal likelihood. . params = [1., 1., 1.] result = minimize(neg_log_likelihood, params, bounds=[(10**-5, 10**5), (10**-5, 10**5), (10**-5, 10**-5)]) params = result.x print(params, result.fun) Y_test_mean, Y_test_cov = predict(params) plt.scatter(X, Y, label=&#39;train&#39;) plt.scatter(X_test, Y_test_mean, label=&#39;test&#39;) plt.legend();plt.xlabel(&#39;X&#39;);plt.ylabel(&#39;Y&#39;); params = np.round(params, 4) plt.title(&#39;sigma=&#39;+str(params[0])+&#39;, c=&#39;+str(params[1])+&#39;, noise=&#39;+str(params[2])); np.allclose(Y_test_ideal, Y_test_mean) . [9.99998123e-01 9.99998123e-01 1.00000000e-05] 10207223403405.541 . False . def neg_log_likelihood(sigma, c, noise_std): n = X.shape[0] cov = cov_func(X, X.T, sigma, c) cov = cov + (noise_std**2)*np.eye(n) nll_ar = 0.5*(Y.T@np.linalg.pinv(cov)@Y) + 0.5*n*np.log(2*np.pi) + 0.5*np.log(np.linalg.det(cov)) return nll_ar[0,0] . grad_func = grad(neg_log_likelihood, argnum=[0,1,2]) alpha = 0.01 loss = [] sigma, c, noise_std = 1., 1., 1. for _ in range(5000): grads = grad_func(sigma, c, noise_std) # print(grads) sigma = sigma - alpha*grads[0] c = c - alpha*grads[1] noise_std = noise_std - alpha*grads[2] loss.append(neg_log_likelihood(sigma, c, noise_std)) print(sigma, c, noise_std) plt.plot(loss); loss[-1] . 7.588989986845149 -2.830840439162303 32.2487569348891 . 31.05187173290998 . params = sigma, c, noise_std Y_test_mean, Y_test_cov = predict(params) plt.scatter(X, Y, label=&#39;train&#39;) plt.scatter(X_test, Y_test_mean, label=&#39;test&#39;) plt.legend();plt.xlabel(&#39;X&#39;);plt.ylabel(&#39;Y&#39;); params = np.round(params, 4) plt.title(&#39;sigma=&#39;+str(params[0])+&#39;, c=&#39;+str(params[1])+&#39;, noise=&#39;+str(params[2])); np.allclose(means[0], Y_test_mean, rtol=10**-1, atol=10**-1) . False .",
            "url": "https://patel-zeel.github.io/blog/ml/2021/02/17/GP_Kernels.html",
            "relUrl": "/ml/2021/02/17/GP_Kernels.html",
            "date": " • Feb 17, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Surrogates - Chapter 1",
            "content": "import plotly.express as px import matplotlib.pyplot as plt from matplotlib.animation import FuncAnimation from matplotlib import rc import pandas as pd import numpy as np rc(&#39;font&#39;,size=12) . 1.1.1 . Simple order 1 polynomial $ eta = 50 + 8x_1 + 3x_2$ . def first_order(x1, x2): return 50 + 8*x1 + 3*x2 fig, ax = plt.subplots() x1 = x2 = np.linspace(-1,1,100) X1, X2 = np.meshgrid(x1, x2) z = first_order(X1, X2) cntr = plt.contour(X1, X2, z, levels=20);plt.xlabel(&#39;X1&#39;);plt.ylabel(&#39;X2&#39;); plt.xticks([-1,-0.5,0,0.5,1]);plt.yticks([-1,-0.5,0,0.5,1]) ax.clabel(cntr) plt.colorbar(); . Adding interaction term $ eta = 50 + 8x_1 + 3x_2 - 4x_1x_2$ . def first_order_i(x1, x2, c0=50, c1=8, c2=3, c3=4): return c0 + c1*x1 + c2*x2 - c3*x1*x2 x1 = x2 = np.linspace(-1,1,100) X1, X2 = np.meshgrid(x1, x2) fig, ax = plt.subplots() def update(c3): ax.cla() z = first_order_i(X1, X2, c3=c3) cntr = ax.contour(X1, X2, z, levels=20); ax.set_xlabel(&#39;X1&#39;);ax.set_ylabel(&#39;X2&#39;); ax.set_xticks([-1,-0.5,0,0.5,1]);ax.set_yticks([-1,-0.5,0,0.5,1]) ax.clabel(cntr); ax.set_title(&#39;c3 = &#39;+str(c3)) anim = FuncAnimation(fig, update, frames=np.arange(-4,5)) plt.close() rc(&#39;animation&#39;,html=&#39;jshtml&#39;) anim . &lt;/input&gt; Once Loop Reflect Adding squared terms $ eta = 50 + 8x_1 + 3x_2 - 7x_1^2 - 3x_2^2 - 4x_1x_2$ . def simple_max(x1, x2, c0=50, c1=8, c2=3, c3=7, c4=3, c5=4): return c0 + c1*x1 + c2*x2 - c3*np.square(x1) - c4*np.square(x2) - c5*x1*x2 x1 = x2 = np.linspace(-1,1,100) X1, X2 = np.meshgrid(x1, x2) fig, ax = plt.subplots() def update(c3): ax.cla() z = simple_max(X1, X2, c3=c3) cntr = ax.contour(X1, X2, z, levels=20); ax.set_xlabel(&#39;X1&#39;);ax.set_ylabel(&#39;X2&#39;); ax.set_xticks([-1,-0.5,0,0.5,1]);ax.set_yticks([-1,-0.5,0,0.5,1]) ax.clabel(cntr); ax.set_title(&#39;c3 = &#39;+str(c3)) anim = FuncAnimation(fig, update, frames=np.arange(7-3,7+4)) plt.close() rc(&#39;animation&#39;,html=&#39;jshtml&#39;) anim . &lt;/input&gt; Once Loop Reflect Stationary ridge $80+4x_1+8x_2-3x_1^2-12x_2^2-12x_1x_2$ . def stat_ridge(x1, x2, c1=80, c2=4, c3=8, c4=3, c5=12, c6=12): return c1 + c2*x1 + c3*x2 - c4*np.square(x1) - c5*np.square(x2) - c6*x1*x2 x1 = x2 = np.linspace(-1,1,100) X1, X2 = np.meshgrid(x1, x2) fig, ax = plt.subplots() def update(c2): ax.cla() z = stat_ridge(X1, X2, c2=c2) cntr = ax.contour(X1, X2, z, levels=20); ax.set_xlabel(&#39;X1&#39;);ax.set_ylabel(&#39;X2&#39;); ax.set_xticks([-1,-0.5,0,0.5,1]);ax.set_yticks([-1,-0.5,0,0.5,1]) ax.clabel(cntr); ax.set_title(&#39;c2 = &#39;+str(c2)) anim = FuncAnimation(fig, update, frames=np.arange(-4,9)) plt.close() rc(&#39;animation&#39;,html=&#39;jshtml&#39;) anim . &lt;/input&gt; Once Loop Reflect Saddle . def saddle(x1, x2, c0=80, c1=4, c2=8, c3=2, c4=12, c5=12): return c0 + c1*x1 + c2*x2 - c3*x1 - c4*x2 - c5*x1*x2 fig, ax = plt.subplots() x1 = x2 = np.linspace(-1,1,100) X1, X2 = np.meshgrid(x1, x2) z = saddle(X1, X2) cntr = plt.contour(X1, X2, z, levels=20);plt.xlabel(&#39;X1&#39;);plt.ylabel(&#39;X2&#39;); plt.xticks([-1,-0.5,0,0.5,1]);plt.yticks([-1,-0.5,0,0.5,1]) ax.clabel(cntr); . 1.2.1 Aircraft wing weight example . def wingwt(Sw=0.48, Wfw=0.4, A=0.38, L=0.5, q=0.62, l=0.344, Rtc=0.4, Nz=0.37, Wdg=0.38): ## put coded inputs back on natural scale Sw = Sw*(200 - 150) + 150 Wfw = Wfw*(300 - 220) + 220 A = A*(10 - 6) + 6 L = (L*(10 - (-10)) - 10) * np.pi/180 q = q*(45 - 16) + 16 l = l*(1 - 0.5) + 0.5 Rtc = Rtc*(0.18 - 0.08) + 0.08 Nz = Nz*(6 - 2.5) + 2.5 Wdg = Wdg*(2500 - 1700) + 1700 ## calculation on natural scale W = 0.036*Sw**0.758 * Wfw**0.0035 * (A/np.cos(L)**2)**0.6 * q**0.006 W = W * l**0.04 * (100*Rtc/np.cos(L))**(-0.3) * (Nz*Wdg)**(0.49) return(W) . Generating $100 times 100$ grid to check interactions between $A$ (aspect ratio) and $N_z$ (ultimate load factor) . x1 = x2 = np.linspace(0,1,100) A, Nz = np.meshgrid(x1, x2) wt = wingwt(A=A, Nz=Nz) fig, ax = plt.subplots() cntr = plt.contour(A, Nz, wt, levels=20);plt.xlabel(&#39;A&#39;);plt.ylabel(&#39;Nz&#39;); ticks = [0,0.2,0.4,0.6,0.8,1] plt.xticks(ticks);plt.yticks(ticks) ax.clabel(cntr); . Now, checking interactions between $ lambda$ (taper ratio) and $W_{fw}$ (weight of fuel in wing) . x1 = x2 = np.linspace(0,1,100) l, Wfw = np.meshgrid(x1, x2) wt = wingwt(l=l, Wfw=Wfw) fig, ax = plt.subplots() cntr = plt.contour(l, Wfw, wt, levels=20);plt.xlabel(&#39;l&#39;);plt.ylabel(&#39;Wfw&#39;); ticks = [0,0.2,0.4,0.6,0.8,1] plt.xticks(ticks);plt.yticks(ticks) ax.clabel(cntr); . Generating grids for each pair (total $^9C_2$ = 36) and evaluating $100 times 100$ grid is not computationally tengible. . Let&#39;s generate 1000 Latin Hypercube samples (LHS) for 9 dimensions of interest. . import pyDOE2 . X = pyDOE2.doe_lhs.lhs(9, 1000, random_state=0) plt.scatter(X[:,0], X[:,1], s=10); . Now, We will evaluate this input space in wingwt function to generate response variable wing weight. . Y = wingwt(*[X[:,i] for i in range(9)]) Y.shape . (1000,) . We fit the only features given in book chosen by backward step selection and BIC criterion . from sklearn.linear_model import LinearRegression from sklearn.preprocessing import PolynomialFeatures trans = PolynomialFeatures(2, interaction_only=True, include_bias=False) # from mlxtend.feature_selection import SequentialFeatureSelector as sfs model = LinearRegression() model.fit(trans.fit_transform(X)[:,[0,2,4,5,6,7,8,37]], np.log(Y)); ic = model.intercept_.round(4) coef = model.coef_.round(4) . print({&#39;Intercept&#39;:ic,&#39;Sw&#39;:coef[0],&#39;A&#39;:coef[1],&#39;q&#39;:coef[2],&#39;l&#39;:coef[3], &#39;Rtc&#39;:coef[4],&#39;Nz&#39;:coef[5],&#39;Wdg&#39;:coef[6],&#39;q:Nz&#39;:coef[7]}) . {&#39;Intercept&#39;: 5.0765, &#39;Sw&#39;: 0.2186, &#39;A&#39;: 0.305, &#39;q&#39;: 0.0048, &#39;l&#39;: 0.0278, &#39;Rtc&#39;: -0.2378, &#39;Nz&#39;: 0.4179, &#39;Wdg&#39;: 0.1882, &#39;q:Nz&#39;: 0.0028} . As per book, interaction between A and Nz is not captured though we know it exists. . Now, We will fit a GP and visualize interaction between A and Nz . import GPy . GP = GPy.models.GPRegression(X, Y.reshape(-1,1), GPy.kern.RBF(input_dim=9, active_dims=list(range(9)), ARD=True)) GP.optimize() . /home/patel_zeel/anaconda3/lib/python3.8/site-packages/GPy/kern/src/stationary.py:243: RuntimeWarning:invalid value encountered in true_divide . &lt;paramz.optimization.optimization.opt_lbfgsb at 0x7fc56eeae3d0&gt; . wingwt . &lt;function __main__.wingwt(Sw=0.48, Wfw=0.4, A=0.38, L=0.5, q=0.62, l=0.344, Rtc=0.4, Nz=0.37, Wdg=0.38)&gt; . Creating a $100 times 100$ grid of A and Nz and setting other parameters to baseline. . params = [] for param in range(9): param_val = wingwt.__defaults__[param]*np.ones((10000,1)) params.append(param_val) # Modify A and Nz at positions 2 and 7 params[2] = A.reshape(-1,1) params[7] = Nz.reshape(-1,1) # Create test grid XX = np.hstack(params) XX.shape . (10000, 9) . pred_Y, pred_Var = GP.predict(XX) . fig, ax = plt.subplots(1,2, sharex=True, sharey=True,figsize=(10,4)) cntr1 = ax[0].contour(A, Nz, pred_Y.reshape(100,100), levels=20); ax[0].clabel(cntr1); wt = wingwt(A=A, Nz=Nz) cntr2 = ax[1].contour(A, Nz, wt, levels=20); ax[1].clabel(cntr2); ticks = [0,0.2,0.4,0.6,0.8,1] for i in range(2): ax[i].set_xlabel(&#39;A&#39;);ax[i].set_ylabel(&#39;Nz&#39;); ax[i].set_xticks(ticks);ax[i].set_yticks(ticks) ax[0].set_title(&#39;Predicted response&#39;) ax[1].set_title(&#39;Baseline response&#39;); . Now, doing 1D sensitivity analysis for all 9 process variables . preds = [] for i in range(9): print(i,end=&#39;&#39;) params = [] for param in range(9): param_val = wingwt.__defaults__[param]*np.ones((1000,1)) params.append(param_val) # Modify ith parameter params[i] = np.linspace(0,1,1000).reshape(-1,1) # Create test grid XX = np.hstack(params) preds.append(GP.predict(XX)[0]) print(&#39; Done&#39;) # wingwt . 012345678 Done . plt.figure(figsize=(15,5)) param_names = [&#39;Sw&#39;,&#39;Wfw&#39;,&#39;A&#39;,&#39;L&#39;,&#39;q&#39;,&#39;l&#39;,&#39;Rtc&#39;,&#39;Nz&#39;,&#39;Wdg&#39;] for i in range(9): plt.plot(np.linspace(0,1,1000), preds[i], label=param_names[i]) plt.legend(bbox_to_anchor=[1,1]); plt.xlabel(&#39;Process variable&#39;);plt.ylabel(&#39;Response variable&#39;); . Variables l, L, Wfw and q are not very useful in determining yields of response variable. .",
            "url": "https://patel-zeel.github.io/blog/gp/2021/02/17/Chap-1-Py.html",
            "relUrl": "/gp/2021/02/17/Chap-1-Py.html",
            "date": " • Feb 17, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://patel-zeel.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://patel-zeel.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}